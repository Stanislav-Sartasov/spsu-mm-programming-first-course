//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FilterClient.FilterService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FilterService.IFilterService", CallbackContract=typeof(FilterClient.FilterService.IFilterServiceCallback))]
    public interface IFilterService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilterService/GetFilters", ReplyAction="http://tempuri.org/IFilterService/GetFiltersResponse")]
        string[] GetFilters();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilterService/GetFilters", ReplyAction="http://tempuri.org/IFilterService/GetFiltersResponse")]
        System.Threading.Tasks.Task<string[]> GetFiltersAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFilterService/ApplyFilter")]
        void ApplyFilter(byte[] img, string filter);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFilterService/ApplyFilter")]
        System.Threading.Tasks.Task ApplyFilterAsync(byte[] img, string filter);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFilterService/StopFiltering")]
        void StopFiltering();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFilterService/StopFiltering")]
        System.Threading.Tasks.Task StopFilteringAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFilterServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFilterService/ProgressCallback")]
        void ProgressCallback(int progress);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFilterService/ImageCallback")]
        void ImageCallback(byte[] img);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFilterServiceChannel : FilterClient.FilterService.IFilterService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FilterServiceClient : System.ServiceModel.DuplexClientBase<FilterClient.FilterService.IFilterService>, FilterClient.FilterService.IFilterService {
        
        public FilterServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public FilterServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public FilterServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FilterServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FilterServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string[] GetFilters() {
            return base.Channel.GetFilters();
        }
        
        public System.Threading.Tasks.Task<string[]> GetFiltersAsync() {
            return base.Channel.GetFiltersAsync();
        }
        
        public void ApplyFilter(byte[] img, string filter) {
            base.Channel.ApplyFilter(img, filter);
        }
        
        public System.Threading.Tasks.Task ApplyFilterAsync(byte[] img, string filter) {
            return base.Channel.ApplyFilterAsync(img, filter);
        }
        
        public void StopFiltering() {
            base.Channel.StopFiltering();
        }
        
        public System.Threading.Tasks.Task StopFilteringAsync() {
            return base.Channel.StopFilteringAsync();
        }
    }
}
